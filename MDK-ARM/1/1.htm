<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [1\1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 1\1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 03 00:33:12 2019
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
KeyCallbackMinus2_2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[34]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">BusFault_Handler</a><BR>
 <LI><a href="#[32]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">HardFault_Handler</a><BR>
 <LI><a href="#[33]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">MemManage_Handler</a><BR>
 <LI><a href="#[35]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">CallbackDisplay1_1</a> from menu.o(i.CallbackDisplay1_1) referenced 6 times from display.o(.data)
 <LI><a href="#[4]">CallbackDisplay1_2</a> from menu.o(i.CallbackDisplay1_2) referenced 6 times from display.o(.data)
 <LI><a href="#[8]">CallbackDisplay1_3</a> from menu.o(i.CallbackDisplay1_3) referenced 6 times from display.o(.data)
 <LI><a href="#[c]">CallbackDisplay2_1</a> from menu.o(i.CallbackDisplay2_1) referenced 6 times from display.o(.data)
 <LI><a href="#[10]">CallbackDisplay2_2</a> from menu.o(i.CallbackDisplay2_2) referenced 6 times from display.o(.data)
 <LI><a href="#[14]">CallbackDisplay2_3</a> from menu.o(i.CallbackDisplay2_3) referenced 6 times from display.o(.data)
 <LI><a href="#[18]">CallbackDisplay2_4</a> from menu.o(i.CallbackDisplay2_4) referenced 6 times from display.o(.data)
 <LI><a href="#[1c]">CallbackDisplay2_5</a> from menu.o(i.CallbackDisplay2_5) referenced 6 times from display.o(.data)
 <LI><a href="#[20]">CallbackDisplay2_6</a> from menu.o(i.CallbackDisplay2_6) referenced 6 times from display.o(.data)
 <LI><a href="#[24]">CallbackDisplay3_1</a> from menu.o(i.CallbackDisplay3_1) referenced 6 times from display.o(.data)
 <LI><a href="#[28]">CallbackDisplay3_2</a> from menu.o(i.CallbackDisplay3_2) referenced 6 times from display.o(.data)
 <LI><a href="#[2c]">CallbackDisplay4_1</a> from menu.o(i.CallbackDisplay4_1) referenced 6 times from display.o(.data)
 <LI><a href="#[45]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[73]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[74]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[75]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">KeyCallbackConfirm1_1</a> from menu.o(i.KeyCallbackConfirm1_1) referenced 6 times from display.o(.data)
 <LI><a href="#[7]">KeyCallbackConfirm1_2</a> from menu.o(i.KeyCallbackConfirm1_2) referenced 6 times from display.o(.data)
 <LI><a href="#[b]">KeyCallbackConfirm1_3</a> from menu.o(i.KeyCallbackConfirm1_3) referenced 6 times from display.o(.data)
 <LI><a href="#[f]">KeyCallbackConfirm2_1</a> from menu.o(i.KeyCallbackConfirm2_1) referenced 6 times from display.o(.data)
 <LI><a href="#[13]">KeyCallbackConfirm2_2</a> from menu.o(i.KeyCallbackConfirm2_2) referenced 6 times from display.o(.data)
 <LI><a href="#[17]">KeyCallbackConfirm2_3</a> from menu.o(i.KeyCallbackConfirm2_3) referenced 6 times from display.o(.data)
 <LI><a href="#[1b]">KeyCallbackConfirm2_4</a> from menu.o(i.KeyCallbackConfirm2_4) referenced 6 times from display.o(.data)
 <LI><a href="#[1f]">KeyCallbackConfirm2_5</a> from menu.o(i.KeyCallbackConfirm2_5) referenced 6 times from display.o(.data)
 <LI><a href="#[23]">KeyCallbackConfirm2_6</a> from menu.o(i.KeyCallbackConfirm2_6) referenced 6 times from display.o(.data)
 <LI><a href="#[27]">KeyCallbackConfirm3_1</a> from menu.o(i.KeyCallbackConfirm3_1) referenced 6 times from display.o(.data)
 <LI><a href="#[2b]">KeyCallbackConfirm3_2</a> from menu.o(i.KeyCallbackConfirm3_2) referenced 6 times from display.o(.data)
 <LI><a href="#[2f]">KeyCallbackConfirm4_1</a> from menu.o(i.KeyCallbackConfirm4_1) referenced 6 times from display.o(.data)
 <LI><a href="#[2]">KeyCallbackMinus1_1</a> from menu.o(i.KeyCallbackMinus1_1) referenced 6 times from display.o(.data)
 <LI><a href="#[6]">KeyCallbackMinus1_2</a> from menu.o(i.KeyCallbackMinus1_2) referenced 6 times from display.o(.data)
 <LI><a href="#[a]">KeyCallbackMinus1_3</a> from menu.o(i.KeyCallbackMinus1_3) referenced 6 times from display.o(.data)
 <LI><a href="#[12]">KeyCallbackMinus2_2</a> from menu.o(i.KeyCallbackMinus2_2) referenced 6 times from display.o(.data)
 <LI><a href="#[16]">KeyCallbackMinus2_3</a> from menu.o(i.KeyCallbackMinus2_3) referenced 6 times from display.o(.data)
 <LI><a href="#[1a]">KeyCallbackMinus2_4</a> from menu.o(i.KeyCallbackMinus2_4) referenced 6 times from display.o(.data)
 <LI><a href="#[1e]">KeyCallbackMinus2_5</a> from menu.o(i.KeyCallbackMinus2_5) referenced 6 times from display.o(.data)
 <LI><a href="#[22]">KeyCallbackMinus2_6</a> from menu.o(i.KeyCallbackMinus2_6) referenced 6 times from display.o(.data)
 <LI><a href="#[26]">KeyCallbackMinus3_1</a> from menu.o(i.KeyCallbackMinus3_1) referenced 6 times from display.o(.data)
 <LI><a href="#[2a]">KeyCallbackMinus3_2</a> from menu.o(i.KeyCallbackMinus3_2) referenced 6 times from display.o(.data)
 <LI><a href="#[2e]">KeyCallbackMinus4_1</a> from menu.o(i.KeyCallbackMinus4_1) referenced 6 times from display.o(.data)
 <LI><a href="#[e]">KeyCallbackMiuns2_1</a> from menu.o(i.KeyCallbackMiuns2_1) referenced 6 times from display.o(.data)
 <LI><a href="#[1]">KeyCallbackPlus1_1</a> from menu.o(i.KeyCallbackPlus1_1) referenced 6 times from display.o(.data)
 <LI><a href="#[5]">KeyCallbackPlus1_2</a> from menu.o(i.KeyCallbackPlus1_2) referenced 6 times from display.o(.data)
 <LI><a href="#[9]">KeyCallbackPlus1_3</a> from menu.o(i.KeyCallbackPlus1_3) referenced 6 times from display.o(.data)
 <LI><a href="#[d]">KeyCallbackPlus2_1</a> from menu.o(i.KeyCallbackPlus2_1) referenced 6 times from display.o(.data)
 <LI><a href="#[11]">KeyCallbackPlus2_2</a> from menu.o(i.KeyCallbackPlus2_2) referenced 6 times from display.o(.data)
 <LI><a href="#[15]">KeyCallbackPlus2_3</a> from menu.o(i.KeyCallbackPlus2_3) referenced 6 times from display.o(.data)
 <LI><a href="#[19]">KeyCallbackPlus2_4</a> from menu.o(i.KeyCallbackPlus2_4) referenced 6 times from display.o(.data)
 <LI><a href="#[1d]">KeyCallbackPlus2_5</a> from menu.o(i.KeyCallbackPlus2_5) referenced 6 times from display.o(.data)
 <LI><a href="#[21]">KeyCallbackPlus2_6</a> from menu.o(i.KeyCallbackPlus2_6) referenced 6 times from display.o(.data)
 <LI><a href="#[25]">KeyCallbackPlus3_1</a> from menu.o(i.KeyCallbackPlus3_1) referenced 6 times from display.o(.data)
 <LI><a href="#[29]">KeyCallbackPlus3_2</a> from menu.o(i.KeyCallbackPlus3_2) referenced 6 times from display.o(.data)
 <LI><a href="#[2d]">KeyCallbackPlus4_1</a> from menu.o(i.KeyCallbackPlus4_1) referenced 6 times from display.o(.data)
 <LI><a href="#[33]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[77]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[3c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[57]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[70]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[71]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6e]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[78]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[76]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>CallbackDisplay1_1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay1_1 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>CallbackDisplay1_2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay1_2 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CallbackDisplay1_3</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay1_3 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>CallbackDisplay2_1</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_1 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>CallbackDisplay2_2</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_2 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>CallbackDisplay2_3</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_3 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>CallbackDisplay2_4</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_4 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>CallbackDisplay2_5</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_5 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>CallbackDisplay2_6</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay2_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay2_6 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>CallbackDisplay3_1</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay3_1 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>CallbackDisplay3_2</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay3_2 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>CallbackDisplay4_1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menu.o(i.CallbackDisplay4_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CallbackDisplay4_1 &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> menu.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
</UL>

<P><STRONG><a name="[96]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a2]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[82]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>

<P><STRONG><a name="[8c]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_UART_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>

<P><STRONG><a name="[32]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>KeyCallbackConfirm1_1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.KeyCallbackConfirm1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyCallbackConfirm1_1 &rArr; OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayMenu
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>KeyCallbackConfirm1_2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.KeyCallbackConfirm1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyCallbackConfirm1_2 &rArr; OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayMenu
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>KeyCallbackConfirm1_3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.KeyCallbackConfirm1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyCallbackConfirm1_3 &rArr; OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayMenu
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>KeyCallbackConfirm2_1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_1 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>KeyCallbackConfirm2_2</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_2 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>KeyCallbackConfirm2_3</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_3 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>KeyCallbackConfirm2_4</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_4 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>KeyCallbackConfirm2_5</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_5 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>KeyCallbackConfirm2_6</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm2_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm2_6 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>KeyCallbackConfirm3_1</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm3_1 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>KeyCallbackConfirm3_2</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackConfirm3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyCallbackConfirm3_2 &rArr; protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>KeyCallbackConfirm4_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackConfirm4_1))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> menu.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>KeyCallbackMinus1_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackMinus1_1))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>KeyCallbackMinus1_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackMinus1_2))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>KeyCallbackMinus1_3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackMinus1_3))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>KeyCallbackMinus2_2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus2_2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>KeyCallbackMinus2_3</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus2_3 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>KeyCallbackMinus2_4</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus2_4 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>KeyCallbackMinus2_5</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus2_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus2_5 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>KeyCallbackMinus2_6</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus2_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus2_6 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>KeyCallbackMinus3_1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus3_1 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>KeyCallbackMinus3_2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMinus3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMinus3_2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>KeyCallbackMinus4_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackMinus4_1))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> menu.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>KeyCallbackMiuns2_1</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackMiuns2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackMiuns2_1 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>KeyCallbackPlus1_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackPlus1_1))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>KeyCallbackPlus1_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackPlus1_2))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>KeyCallbackPlus1_3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackPlus1_3))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>KeyCallbackPlus2_1</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_1 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>KeyCallbackPlus2_2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>KeyCallbackPlus2_3</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_3 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>KeyCallbackPlus2_4</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_4 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>KeyCallbackPlus2_5</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_5 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>KeyCallbackPlus2_6</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus2_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus2_6 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>KeyCallbackPlus3_1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus3_1 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>KeyCallbackPlus3_2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.KeyCallbackPlus3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = KeyCallbackPlus3_2 &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> main.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>KeyCallbackPlus4_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.KeyCallbackPlus4_1))
<BR>[Address Reference Count : 3]<UL><LI> display.o(.data)
<LI> menu.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>MX_GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>OLED_Clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_3
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_2
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOled
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>OLED_DrawPoint</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>

<P><STRONG><a name="[9a]"></a>OLED_DrawRectangle</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, oled.o(i.OLED_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_DrawRectangle &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOption
</UL>

<P><STRONG><a name="[9c]"></a>OLED_Init</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>OLED_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oled.o(i.OLED_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[99]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[9f]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[a0]"></a>OLED_ShowChar</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[80]"></a>OLED_ShowNum</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus3_2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus3_1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_6
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_5
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_4
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_3
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackPlus2_1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMiuns2_1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus3_2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus3_1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus2_6
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus2_5
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus2_4
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus2_3
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackMinus2_2
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay3_2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay3_1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_6
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_5
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_4
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_3
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_1
</UL>

<P><STRONG><a name="[7f]"></a>OLED_ShowString</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay4_1
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay3_2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay3_1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_6
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_5
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_4
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_3
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_2
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay2_1
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay1_3
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay1_2
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallbackDisplay1_1
</UL>

<P><STRONG><a name="[9e]"></a>OLED_WR_Byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[38]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SystemClock_Config</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9d]"></a>delay_ms</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
</UL>

<P><STRONG><a name="[a8]"></a>delay_us</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
</UL>

<P><STRONG><a name="[a7]"></a>detectKey</STRONG> (Thumb, 642 bytes, Stack size 56 bytes, key.o(i.detectKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = detectKey &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>displayMenu</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, display.o(i.displayMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = displayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_3
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_2
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm1_1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOled
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>displayOled</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, display.o(i.displayOled))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = displayOled &rArr; displayOption &rArr; OLED_DrawRectangle &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOption
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>displayOption</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, display.o(i.displayOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = displayOption &rArr; OLED_DrawRectangle &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOled
</UL>

<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectKey
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayOled
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayMenu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>protocolUart</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, protocol.o(i.protocolUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = protocolUart &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm3_2
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm3_1
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_6
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_5
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_4
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_3
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCallbackConfirm2_1
</UL>

<P><STRONG><a name="[ac]"></a>sumCheck</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, protocol.o(i.sumCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocolUart
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[91]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[87]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
